package com.splant.smartgarden.daoModel.Gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.splant.smartgarden.daoModel.Entity.UnitSingleModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UNIT_SINGLE_MODEL".
*/
public class UnitSingleModelDao extends AbstractDao<UnitSingleModel, Void> {

    public static final String TABLENAME = "UNIT_SINGLE_MODEL";

    /**
     * Properties of entity UnitSingleModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DbId = new Property(0, String.class, "DbId", false, "DB_ID");
        public final static Property UnitId = new Property(1, String.class, "UnitId", false, "UNIT_ID");
        public final static Property UnitName = new Property(2, String.class, "UnitName", false, "UNIT_NAME");
        public final static Property AreaId = new Property(3, String.class, "AreaId", false, "AREA_ID");
        public final static Property AreaName = new Property(4, String.class, "AreaName", false, "AREA_NAME");
        public final static Property PlantId = new Property(5, String.class, "PlantId", false, "PLANT_ID");
        public final static Property PlantName = new Property(6, String.class, "PlantName", false, "PLANT_NAME");
        public final static Property PlantType = new Property(7, String.class, "PlantType", false, "PLANT_TYPE");
        public final static Property PlantCount = new Property(8, Integer.class, "PlantCount", false, "PLANT_COUNT");
        public final static Property LastWaterTime = new Property(9, Long.class, "LastWaterTime", false, "LAST_WATER_TIME");
        public final static Property Descript = new Property(10, String.class, "Descript", false, "DESCRIPT");
        public final static Property WaterId = new Property(11, String.class, "WaterId", false, "WATER_ID");
        public final static Property WaterName = new Property(12, String.class, "WaterName", false, "WATER_NAME");
        public final static Property WaterSwitch = new Property(13, String.class, "WaterSwitch", false, "WATER_SWITCH");
        public final static Property ImageUrl = new Property(14, String.class, "ImageUrl", false, "IMAGE_URL");
        public final static Property State = new Property(15, Integer.class, "State", false, "STATE");
        public final static Property PowerEmery = new Property(16, String.class, "PowerEmery", false, "POWER_EMERY");
        public final static Property DeviceType = new Property(17, String.class, "DeviceType", false, "DEVICE_TYPE");
        public final static Property Alarm = new Property(18, Integer.class, "Alarm", false, "ALARM");
        public final static Property MapCoord = new Property(19, String.class, "MapCoord", false, "MAP_COORD");
        public final static Property MapX = new Property(20, String.class, "MapX", false, "MAP_X");
        public final static Property MapY = new Property(21, String.class, "MapY", false, "MAP_Y");
        public final static Property ClientId = new Property(22, String.class, "ClientId", false, "CLIENT_ID");
        public final static Property GatewayId = new Property(23, String.class, "GatewayId", false, "GATEWAY_ID");
        public final static Property GatewayName = new Property(24, String.class, "GatewayName", false, "GATEWAY_NAME");
    }


    public UnitSingleModelDao(DaoConfig config) {
        super(config);
    }
    
    public UnitSingleModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UNIT_SINGLE_MODEL\" (" + //
                "\"DB_ID\" TEXT," + // 0: DbId
                "\"UNIT_ID\" TEXT," + // 1: UnitId
                "\"UNIT_NAME\" TEXT," + // 2: UnitName
                "\"AREA_ID\" TEXT," + // 3: AreaId
                "\"AREA_NAME\" TEXT," + // 4: AreaName
                "\"PLANT_ID\" TEXT," + // 5: PlantId
                "\"PLANT_NAME\" TEXT," + // 6: PlantName
                "\"PLANT_TYPE\" TEXT," + // 7: PlantType
                "\"PLANT_COUNT\" INTEGER," + // 8: PlantCount
                "\"LAST_WATER_TIME\" INTEGER," + // 9: LastWaterTime
                "\"DESCRIPT\" TEXT," + // 10: Descript
                "\"WATER_ID\" TEXT," + // 11: WaterId
                "\"WATER_NAME\" TEXT," + // 12: WaterName
                "\"WATER_SWITCH\" TEXT," + // 13: WaterSwitch
                "\"IMAGE_URL\" TEXT," + // 14: ImageUrl
                "\"STATE\" INTEGER," + // 15: State
                "\"POWER_EMERY\" TEXT," + // 16: PowerEmery
                "\"DEVICE_TYPE\" TEXT," + // 17: DeviceType
                "\"ALARM\" INTEGER," + // 18: Alarm
                "\"MAP_COORD\" TEXT," + // 19: MapCoord
                "\"MAP_X\" TEXT," + // 20: MapX
                "\"MAP_Y\" TEXT," + // 21: MapY
                "\"CLIENT_ID\" TEXT," + // 22: ClientId
                "\"GATEWAY_ID\" TEXT," + // 23: GatewayId
                "\"GATEWAY_NAME\" TEXT);"); // 24: GatewayName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UNIT_SINGLE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UnitSingleModel entity) {
        stmt.clearBindings();
 
        String DbId = entity.getDbId();
        if (DbId != null) {
            stmt.bindString(1, DbId);
        }
 
        String UnitId = entity.getUnitId();
        if (UnitId != null) {
            stmt.bindString(2, UnitId);
        }
 
        String UnitName = entity.getUnitName();
        if (UnitName != null) {
            stmt.bindString(3, UnitName);
        }
 
        String AreaId = entity.getAreaId();
        if (AreaId != null) {
            stmt.bindString(4, AreaId);
        }
 
        String AreaName = entity.getAreaName();
        if (AreaName != null) {
            stmt.bindString(5, AreaName);
        }
 
        String PlantId = entity.getPlantId();
        if (PlantId != null) {
            stmt.bindString(6, PlantId);
        }
 
        String PlantName = entity.getPlantName();
        if (PlantName != null) {
            stmt.bindString(7, PlantName);
        }
 
        String PlantType = entity.getPlantType();
        if (PlantType != null) {
            stmt.bindString(8, PlantType);
        }
 
        Integer PlantCount = entity.getPlantCount();
        if (PlantCount != null) {
            stmt.bindLong(9, PlantCount);
        }
 
        Long LastWaterTime = entity.getLastWaterTime();
        if (LastWaterTime != null) {
            stmt.bindLong(10, LastWaterTime);
        }
 
        String Descript = entity.getDescript();
        if (Descript != null) {
            stmt.bindString(11, Descript);
        }
 
        String WaterId = entity.getWaterId();
        if (WaterId != null) {
            stmt.bindString(12, WaterId);
        }
 
        String WaterName = entity.getWaterName();
        if (WaterName != null) {
            stmt.bindString(13, WaterName);
        }
 
        String WaterSwitch = entity.getWaterSwitch();
        if (WaterSwitch != null) {
            stmt.bindString(14, WaterSwitch);
        }
 
        String ImageUrl = entity.getImageUrl();
        if (ImageUrl != null) {
            stmt.bindString(15, ImageUrl);
        }
 
        Integer State = entity.getState();
        if (State != null) {
            stmt.bindLong(16, State);
        }
 
        String PowerEmery = entity.getPowerEmery();
        if (PowerEmery != null) {
            stmt.bindString(17, PowerEmery);
        }
 
        String DeviceType = entity.getDeviceType();
        if (DeviceType != null) {
            stmt.bindString(18, DeviceType);
        }
 
        Integer Alarm = entity.getAlarm();
        if (Alarm != null) {
            stmt.bindLong(19, Alarm);
        }
 
        String MapCoord = entity.getMapCoord();
        if (MapCoord != null) {
            stmt.bindString(20, MapCoord);
        }
 
        String MapX = entity.getMapX();
        if (MapX != null) {
            stmt.bindString(21, MapX);
        }
 
        String MapY = entity.getMapY();
        if (MapY != null) {
            stmt.bindString(22, MapY);
        }
 
        String ClientId = entity.getClientId();
        if (ClientId != null) {
            stmt.bindString(23, ClientId);
        }
 
        String GatewayId = entity.getGatewayId();
        if (GatewayId != null) {
            stmt.bindString(24, GatewayId);
        }
 
        String GatewayName = entity.getGatewayName();
        if (GatewayName != null) {
            stmt.bindString(25, GatewayName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UnitSingleModel entity) {
        stmt.clearBindings();
 
        String DbId = entity.getDbId();
        if (DbId != null) {
            stmt.bindString(1, DbId);
        }
 
        String UnitId = entity.getUnitId();
        if (UnitId != null) {
            stmt.bindString(2, UnitId);
        }
 
        String UnitName = entity.getUnitName();
        if (UnitName != null) {
            stmt.bindString(3, UnitName);
        }
 
        String AreaId = entity.getAreaId();
        if (AreaId != null) {
            stmt.bindString(4, AreaId);
        }
 
        String AreaName = entity.getAreaName();
        if (AreaName != null) {
            stmt.bindString(5, AreaName);
        }
 
        String PlantId = entity.getPlantId();
        if (PlantId != null) {
            stmt.bindString(6, PlantId);
        }
 
        String PlantName = entity.getPlantName();
        if (PlantName != null) {
            stmt.bindString(7, PlantName);
        }
 
        String PlantType = entity.getPlantType();
        if (PlantType != null) {
            stmt.bindString(8, PlantType);
        }
 
        Integer PlantCount = entity.getPlantCount();
        if (PlantCount != null) {
            stmt.bindLong(9, PlantCount);
        }
 
        Long LastWaterTime = entity.getLastWaterTime();
        if (LastWaterTime != null) {
            stmt.bindLong(10, LastWaterTime);
        }
 
        String Descript = entity.getDescript();
        if (Descript != null) {
            stmt.bindString(11, Descript);
        }
 
        String WaterId = entity.getWaterId();
        if (WaterId != null) {
            stmt.bindString(12, WaterId);
        }
 
        String WaterName = entity.getWaterName();
        if (WaterName != null) {
            stmt.bindString(13, WaterName);
        }
 
        String WaterSwitch = entity.getWaterSwitch();
        if (WaterSwitch != null) {
            stmt.bindString(14, WaterSwitch);
        }
 
        String ImageUrl = entity.getImageUrl();
        if (ImageUrl != null) {
            stmt.bindString(15, ImageUrl);
        }
 
        Integer State = entity.getState();
        if (State != null) {
            stmt.bindLong(16, State);
        }
 
        String PowerEmery = entity.getPowerEmery();
        if (PowerEmery != null) {
            stmt.bindString(17, PowerEmery);
        }
 
        String DeviceType = entity.getDeviceType();
        if (DeviceType != null) {
            stmt.bindString(18, DeviceType);
        }
 
        Integer Alarm = entity.getAlarm();
        if (Alarm != null) {
            stmt.bindLong(19, Alarm);
        }
 
        String MapCoord = entity.getMapCoord();
        if (MapCoord != null) {
            stmt.bindString(20, MapCoord);
        }
 
        String MapX = entity.getMapX();
        if (MapX != null) {
            stmt.bindString(21, MapX);
        }
 
        String MapY = entity.getMapY();
        if (MapY != null) {
            stmt.bindString(22, MapY);
        }
 
        String ClientId = entity.getClientId();
        if (ClientId != null) {
            stmt.bindString(23, ClientId);
        }
 
        String GatewayId = entity.getGatewayId();
        if (GatewayId != null) {
            stmt.bindString(24, GatewayId);
        }
 
        String GatewayName = entity.getGatewayName();
        if (GatewayName != null) {
            stmt.bindString(25, GatewayName);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UnitSingleModel readEntity(Cursor cursor, int offset) {
        UnitSingleModel entity = new UnitSingleModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // DbId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UnitId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UnitName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // AreaId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // AreaName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // PlantId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // PlantName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // PlantType
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // PlantCount
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // LastWaterTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Descript
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // WaterId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // WaterName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // WaterSwitch
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // ImageUrl
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // State
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // PowerEmery
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // DeviceType
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // Alarm
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // MapCoord
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // MapX
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // MapY
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // ClientId
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // GatewayId
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24) // GatewayName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UnitSingleModel entity, int offset) {
        entity.setDbId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUnitId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUnitName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAreaId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAreaName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPlantId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPlantName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPlantType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPlantCount(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setLastWaterTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setDescript(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setWaterId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWaterName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setWaterSwitch(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setImageUrl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setState(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setPowerEmery(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDeviceType(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAlarm(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setMapCoord(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setMapX(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setMapY(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setClientId(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setGatewayId(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setGatewayName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UnitSingleModel entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UnitSingleModel entity) {
        return null;
    }

    @Override
    public boolean hasKey(UnitSingleModel entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
